import math
import os
import urllib.request as urllib
from html import escape
from io import BytesIO

import requests
from bs4 import BeautifulSoup as bs
from PIL import Image
from telegram import (
    Bot,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ParseMode,
    TelegramError,
    Update,
)
from telegram.ext import CallbackContext
from telegram.utils.helpers import mention_html

from FallenRobot import dispatcher
from FallenRobot.modules.disable import DisableAbleCommandHandler

combot_stickers_url = "https://combot.org/telegram/stickers?q="


def sticker_count(bot: Bot, pname: str) -> int:
    hmm = bot._request.post(
        f"{bot.base_url}/getStickerSet",
        {
            "name": pname,
        },
    )
    return len(hmm["stickers"])


def stickerid(update: Update, context: CallbackContext):
    msg = update.effective_message
    if msg.reply_to_message and msg.reply_to_message.sticker:
        update.effective_message.reply_text(
            "Hey "
            + f"{mention_html(msg.from_user.id, msg.from_user.first_name)}"
            + ", The sticker id you are replying is :\n <code>"
            + escape(msg.reply_to_message.sticker.file_id)
            + "</code>",
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML,
        )
    else:
        update.effective_message.reply_text(
            "Hello "
            + f"{mention_html(msg.from_user.id, msg.from_user.first_name)}"
            + ", Please reply to sticker message to get id sticker",
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML,
        )


def cb_sticker(update: Update, context: CallbackContext):
    msg = update.effective_message
    split = msg.text.split(" ", 1)
    if len(split) == 1:
        msg.reply_text("Provide some name to search for pack.")
        return
    text = requests.get(combot_stickers_url + split[1]).text
    soup = bs(text, "lxml")
    results = soup.find_all("a", {"class": "sticker-pack__btn"})
    titles = soup.find_all("div", "sticker-pack__title")
    if not results:
        msg.reply_text("No results found :(.")
        return
    reply = f"Stickers for *{split[1]}*:"
    for result, title in zip(results, titles):
        link = result["href"]
        reply += f"\n‚Ä¢ [{title.get_text()}]({link})"
    msg.reply_text(reply, parse_mode=ParseMode.MARKDOWN)


def getsticker(update: Update, context: CallbackContext):
    bot = context.bot
    msg = update.effective_message
    if msg.reply_to_message and msg.reply_to_message.sticker:
        file_id = msg.reply_to_message.sticker.file_id
        is_anim = msg.reply_to_message.sticker.is_animated
        sticker_data = bot.get_file(file_id).download(out=BytesIO())
        sticker_data.seek(0)
        filename = "animated_sticker.tgs.hmm_" if is_anim else "sticker.png"

        bot.send_document(
            update.effective_chat.id,
            document=sticker_data,
            filename=filename,
        )
    else:
        update.effective_message.reply_text(
            "·¥õ·¥è ü·¥è…¥…¢  ô·¥Ä ü·¥Äs s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥Ä…¢·¥Ä Ä s·¥Ä è·¥Ä  ô…™s·¥Ä ·¥ç·¥á…¥·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ ·¥ã·¥á ·¥ò…¥…¢."
        )


def kang(update: Update, context: CallbackContext):
    msg = update.effective_message
    user = update.effective_user
    args = context.args
    packnum = 0
    packname = "a" + str(user.id) + "_by_" + context.bot.username
    packname_found = 0
    max_stickers = 120
    while packname_found == 0:
        try:
            if sticker_count(context.bot, packname) >= max_stickers:
                packnum += 1
                packname = (
                    "a"
                    + str(packnum)
                    + "_"
                    + str(user.id)
                    + "_by_"
                    + context.bot.username
                )
            else:
                packname_found = 1
        except TelegramError as e:
            if e.message == "Stickerset_invalid":
                packname_found = 1
    kangsticker = "kangsticker.png"
    is_animated = False
    file_id = ""

    if msg.reply_to_message:
        if msg.reply_to_message.sticker:
            if msg.reply_to_message.sticker.is_animated:
                is_animated = True
            file_id = msg.reply_to_message.sticker.file_id

        elif msg.reply_to_message.photo:
            file_id = msg.reply_to_message.photo[-1].file_id
        elif msg.reply_to_message.document:
            file_id = msg.reply_to_message.document.file_id
        else:
            msg.reply_text("Yea, I can't kang that.")

        kang_file = context.bot.get_file(file_id)
        if not is_animated:
            kang_file.download("kangsticker.png")
        else:
            kang_file.download("kangsticker.tgs")

        if args:
            sticker_emoji = str(args[0])
        elif msg.reply_to_message.sticker and msg.reply_to_message.sticker.emoji:
            sticker_emoji = msg.reply_to_message.sticker.emoji
        else:
            sticker_emoji = "ü§î"

        if not is_animated:
            try:
                im = Image.open(kangsticker)
                maxsize = (512, 512)
                if (im.width and im.height) < 512:
                    size1 = im.width
                    size2 = im.height
                    if im.width > im.height:
                        scale = 512 / size1
                        size1new = 512
                        size2new = size2 * scale
                    else:
                        scale = 512 / size2
                        size1new = size1 * scale
                        size2new = 512
                    size1new = math.floor(size1new)
                    size2new = math.floor(size2new)
                    sizenew = (size1new, size2new)
                    im = im.resize(sizenew)
                else:
                    im.thumbnail(maxsize)
                if not msg.reply_to_message.sticker:
                    im.save(kangsticker, "PNG")
                context.bot.add_sticker_to_set(
                    user_id=user.id,
                    name=packname,
                    png_sticker=open("kangsticker.png", "rb"),
                    emojis=sticker_emoji,
                )
                msg.reply_text(
                    f" ô·¥á Ä ú·¥Äs ü ·¥ç·¥á…¥·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ã·¥á [pack](t.me/addstickers/{packname})"
                    + f"\nEmoji is: {sticker_emoji}",
                    disable_web_page_preview=True,
                    parse_mode=ParseMode.MARKDOWN,
                )

            except OSError as e:
                msg.reply_text("I can only kang images m8.")
                print(e)
                return

            except TelegramError as e:
                if e.message == "Stickerset_invalid":
                    makepack_internal(
                        update,
                        context,
                        msg,
                        user,
                        sticker_emoji,
                        packname,
                        packnum,
                        png_sticker=open("kangsticker.png", "rb"),
                    )
                elif e.message == "Sticker_png_dimensions":
                    im.save(kangsticker, "PNG")
                    context.bot.add_sticker_to_set(
                        user_id=user.id,
                        name=packname,
                        png_sticker=open("kangsticker.png", "rb"),
                        emojis=sticker_emoji,
                    )
                    msg.reply_text(
                        f" ô·¥á Ä ú·¥Äs…™ ü ·¥ç·¥á…¥·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ã·¥á [pack](t.me/addstickers/{packname})"
                        + f"\nEmoji is: {sticker_emoji}",
                        disable_web_page_preview=True,
                        parse_mode=ParseMode.MARKDOWN,
                    )
                elif e.message == "·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥ s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥á·¥ç·¥è·¥ä…™":
                    msg.reply_text("Invalid emoji(s).")
                elif e.message == "Stickers_too_much":
                    msg.reply_text("Max packsize reached. Press F to pay respecc.")
                elif e.message == "s·¥á Ä·¥†·¥á Ä …™…¥·¥õ·¥á Ä…¥·¥Ä ü ·¥á Ä Ä·¥è Ä: s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥ (500)":
                    msg.reply_text(
                        " ô·¥á Ä ú·¥Äs…™ ü ·¥ç·¥á…¥·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ã·¥á [pack](t.me/addstickers/%s)"
                        % packname
                        + "\n"
                        "Emoji is:" + " " + sticker_emoji,
                        disable_web_page_preview=True,
                        parse_mode=ParseMode.MARKDOWN,
                    )
                print(e)

        else:
            packname = "animated" + str(user.id) + "_by_" + context.bot.username
            packname_found = 0
            max_stickers = 50
            while packname_found == 0:
                try:
                    if sticker_count(context.bot, packname) >= max_stickers:
                        packnum += 1
                        packname = (
                            "animated"
                            + str(packnum)
                            + "_"
                            + str(user.id)
                            + "_by_"
                            + context.bot.username
                        )
                    else:
                        packname_found = 1
                except TelegramError as e:
                    if e.message == "Stickerset_invalid":
                        packname_found = 1
            try:
                context.bot.add_sticker_to_set(
                    user_id=user.id,
                    name=packname,
                    tgs_sticker=open("kangsticker.tgs", "rb"),
                    emojis=sticker_emoji,
                )
                msg.reply_text(
                    f" ô·¥á Ä ú·¥Äs…™ ü ·¥ç·¥á…¥·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ã·¥á [pack](t.me/addstickers/{packname})"
                    + f"\nEmoji is: {sticker_emoji}",
                    disable_web_page_preview=True,
                    parse_mode=ParseMode.MARKDOWN,
                )
            except TelegramError as e:
                if e.message == "Stickerset_invalid":
                    makepack_internal(
                        update,
                        context,
                        msg,
                        user,
                        sticker_emoji,
                        packname,
                        packnum,
                        tgs_sticker=open("kangsticker.tgs", "rb"),
                    )
                elif e.message == "Invalid sticker emojis":
                    msg.reply_text("Invalid emoji(s).")
                elif e.message == "s·¥á Ä·¥†·¥á Ä …™…¥·¥õ·¥á Ä…¥·¥Ä ü ·¥á Ä Ä·¥è Ä: s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™ ·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥ (500)":
                    msg.reply_text(
                        "s·¥õ…™·¥Ñ·¥ã·¥á Ä  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ ·¥ã·¥á [pack](t.me/addstickers/%s)"
                        % packname
                        + "\n"
                        "Emoji is:" + " " + sticker_emoji,
                        disable_web_page_preview=True,
                        parse_mode=ParseMode.MARKDOWN,
                    )
                print(e)

    elif args:
        try:
            try:
                urlemoji = msg.text.split(" ")
                png_sticker = urlemoji[1]
                sticker_emoji = urlemoji[2]
            except IndexError:
                sticker_emoji = "ü§î"
            urllib.urlretrieve(png_sticker, kangsticker)
            im = Image.open(kangsticker)
            maxsize = (512, 512)
            if (im.width and im.height) < 512:
                size1 = im.width
                size2 = im.height
                if im.width > im.height:
                    scale = 512 / size1
                    size1new = 512
                    size2new = size2 * scale
                else:
                    scale = 512 / size2
                    size1new = size1 * scale
                    size2new = 512
                size1new = math.floor(size1new)
                size2new = math.floor(size2new)
                sizenew = (size1new, size2new)
                im = im.resize(sizenew)
            else:
                im.thumbnail(maxsize)
            im.save(kangsticker, "PNG")
            msg.reply_photo(photo=open("kangsticker.png", "rb"))
            context.bot.add_sticker_to_set(
                user_id=user.id,
                name=packname,
                png_sticker=open("kangsticker.png", "rb"),
                emojis=sticker_emoji,
            )
            msg.reply_text(
                f"s·¥õ…™·¥Ñ·¥ã·¥á Ä  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ ·¥ã·¥á [pack](t.me/addstickers/{packname})"
                + f"\nEmoji is: {sticker_emoji}",
                disable_web_page_preview=True,
                parse_mode=ParseMode.MARKDOWN,
            )
        except OSError as e:
            msg.reply_text("·¥Ä·¥ã·¥ú  ú·¥Ä…¥ è·¥Ä  ô…™s·¥Ä ·¥ã·¥Ä…¥…¢ …¢·¥Ä·¥ç ô·¥Ä Ä ·¥çùüæ.")
            print(e)
            return
        except TelegramError as e:
            if e.message == "Stickerset_invalid":
                makepack_internal(
                    update,
                    context,
                    msg,
                    user,
                    sticker_emoji,
                    packname,
                    packnum,
                    png_sticker=open("kangsticker.png", "rb"),
                )
            elif e.message == "Sticker_png_dimensions":
                im.save(kangsticker, "PNG")
                context.bot.add_sticker_to_set(
                    user_id=user.id,
                    name=packname,
                    png_sticker=open("kangsticker.png", "rb"),
                    emojis=sticker_emoji,
                )
                msg.reply_text(
                    "s·¥õ…™·¥Ñ·¥ã·¥á Ä  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ ·¥ã·¥á [pack](t.me/addstickers/%s)"
                    % packname
                    + "\n"
                    + "Emoji is:"
                    + " "
                    + sticker_emoji,
                    disable_web_page_preview=True,
                    parse_mode=ParseMode.MARKDOWN,
                )
            elif e.message == "Invalid sticker emojis":
                msg.reply_text("Invalid emoji(s).")
            elif e.message == "Stickers_too_much":
                msg.reply_text("Max packsize reached. Press F to pay respecc.")
            elif e.message == "Internal Server Error: sticker set not found (500)":
                msg.reply_text(
                    "Sticker successfully added to [pack](t.me/addstickers/%s)"
                    % packname
                    + "\n"
                    "Emoji is:" + " " + sticker_emoji,
                    disable_web_page_preview=True,
                    parse_mode=ParseMode.MARKDOWN,
                )
            print(e)
    else:
        packs = "s…™ ü·¥Ä ú·¥ã·¥Ä…¥  ô·¥Ä ü·¥Äs s·¥õ…™·¥Ñ·¥ã·¥á Ä, ·¥Ä·¥õ·¥Ä·¥ú …¢·¥Ä·¥ç ô·¥Ä Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥á·¥õ·¥Ä ú·¥ú…™ …¥ è·¥Ä!\n·¥è ú, …¥…¢·¥è·¥ç·¥è…¥…¢ …¥…¢·¥è·¥ç·¥è…¥…¢ …™…¥…™  Ä·¥Ä…¥s·¥á ü·¥ç·¥ú:\n"
        if packnum > 0:
            firstpackname = "a" + str(user.id) + "_by_" + context.bot.username
            for i in range(0, packnum + 1):
                if i == 0:
                    packs += f"[pack](t.me/addstickers/{firstpackname})\n"
                else:
                    packs += f"[pack{i}](t.me/addstickers/{packname})\n"
        else:
            packs += f"[pack](t.me/addstickers/{packname})"
        msg.reply_text(
            packs, disable_web_page_preview=True, parse_mode=ParseMode.MARKDOWN
        )
    try:
        if os.path.isfile("kangsticker.png"):
            os.remove("kangsticker.png")
        elif os.path.isfile("kangsticker.tgs"):
            os.remove("kangsticker.tgs")
    except:
        pass


def makepack_internal(
    update,
    context,
    msg,
    user,
    emoji,
    packname,
    packnum,
    png_sticker=None,
    tgs_sticker=None,
):
    name = user.first_name
    name = name[:50]
    try:
        extra_version = ""
        if packnum > 0:
            extra_version = " " + str(packnum)
        if png_sticker:
            success = context.bot.create_new_sticker_set(
                user.id,
                packname,
                f"{name}s kang pack" + extra_version,
                png_sticker=png_sticker,
                emojis=emoji,
            )
        if tgs_sticker:
            success = context.bot.create_new_sticker_set(
                user.id,
                packname,
                f"{name}s animated kang pack" + extra_version,
                tgs_sticker=tgs_sticker,
                emojis=emoji,
            )

    except TelegramError as e:
        print(e)
        if e.message == "…¥·¥Ä·¥ç·¥Ä s·¥á·¥õ s·¥õ…™·¥Ñ·¥ã·¥á Ä s·¥ú·¥Ö·¥Ä ú ·¥Ö…™ …™s…™":
            msg.reply_text(
                "·¥ò·¥Ä·¥ã·¥á·¥õ ·¥Ä…¥·¥Ö·¥Ä ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥ [here](t.me/addstickers/%s)" % packname,
                disable_web_page_preview=True,
                parse_mode=ParseMode.MARKDOWN,
            )
        elif e.message in ("Peer_id_invalid", " ô·¥è·¥õ ·¥Ö…™  ô ü·¥è·¥ã…™ Ä ·¥è ü·¥á ú ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä"):
            msg.reply_text(
                " ú·¥ú ô·¥ú…¥…¢…™ s·¥Ä è·¥Ä ·¥Ö…™ ·¥Ñ ú·¥Ä·¥õ first.",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="s·¥õ·¥Ä Ä·¥õ", url=f"t.me/{context.bot.username}"
                            )
                        ]
                    ]
                ),
            )
        elif e.message == "·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥ s·¥á Ä·¥†·¥á Ä …™…¥·¥õ·¥á Ä…¥·¥Ä ü, s·¥á·¥õ s·¥õ…™·¥Ñ·¥ã·¥á Ä  è·¥Ä…¥…¢ ·¥Ö…™  ô·¥ú·¥Ä·¥õ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™ ·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥ (500)":
            msg.reply_text(
                "·¥ò·¥Ä·¥ã·¥á·¥õ s·¥õ…™·¥Ñ·¥ã·¥á Ä  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™  ô·¥ú·¥Ä·¥õ, ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ s·¥á…¢·¥á Ä·¥Ä [here](t.me/addstickers/%s)"
                % packname,
                disable_web_page_preview=True,
                parse_mode=ParseMode.MARKDOWN,
            )
        return

    if success:
        msg.reply_text(
            "·¥ò·¥Ä·¥ã·¥á·¥õ s·¥õ…™·¥Ñ·¥ã·¥á Ä  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™  ô·¥ú·¥Ä·¥õ, ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ s·¥á…¢·¥á Ä·¥Ä [here](t.me/addstickers/%s)"
            % packname,
            disable_web_page_preview=True,
            parse_mode=ParseMode.MARKDOWN,
        )
    else:
        msg.reply_text("…¢·¥Ä…¢·¥Ä ü ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ò·¥Ä·¥ã·¥á·¥õ s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥Ä…¥·¥Ö·¥Ä, ·¥ç·¥ú…¥…¢·¥ã…™…¥ ·¥ã·¥Ä Ä…¥·¥Ä  ô ü·¥Ä·¥Ñ·¥ã ·¥ç·¥Ä…¢…™·¥Ñ.")


__help__ = """
 ‚ùç /stickerid*:*  ô·¥Ä ü·¥Äs s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ã·¥á·¥ò·¥Ä·¥Ö·¥Ä s·¥Ä è·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥á Ä…™ ·¥õ·¥Ä ú·¥ú ·¥Ä…¥·¥Ö·¥Ä …™·¥Ö  ô·¥á Ä·¥ã·¥Äs…¥ è·¥Ä.
 ‚ùç /getsticker*:*  ô·¥Ä ü·¥Äs s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ã·¥á·¥ò·¥Ä·¥Ö·¥Ä s·¥Ä è·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥ú…¥…¢…¢·¥Ä ú  ô·¥á Ä·¥ã·¥Äs ·¥ò…¥…¢ ·¥ç·¥á…¥·¥õ·¥Ä ú…¥ è·¥Ä.
 ‚ùç /kang*:*  ô·¥Ä ü·¥Äs s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ä·¥ç ô·¥Ä ú ·¥ã·¥á ·¥ò·¥Ä·¥ã·¥á·¥õ ·¥Ä…¥·¥Ö·¥Ä.
 ‚ùç /stickers*:* ·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥ s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ú…¥·¥õ·¥ú·¥ã …™s·¥õ…™ ü·¥Ä ú ·¥õ·¥á Ä·¥õ·¥á…¥·¥õ·¥ú ·¥Ö…™ ·¥Ñ·¥Ä·¥õ·¥Ä ü·¥è…¢ s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥Ñ·¥è·¥ç ô·¥è·¥õ
"""

__mod_name__ = "s·¥õ…™·¥Ñ·¥ã·¥á Äs"

STICKERID_HANDLER = DisableAbleCommandHandler("stickerid", stickerid, run_async=True)
GETSTICKER_HANDLER = DisableAbleCommandHandler("getsticker", getsticker, run_async=True)
KANG_HANDLER = DisableAbleCommandHandler("kang", kang, admin_ok=True, run_async=True)
STICKERS_HANDLER = DisableAbleCommandHandler("stickers", cb_sticker, run_async=True)

dispatcher.add_handler(STICKERS_HANDLER)
dispatcher.add_handler(STICKERID_HANDLER)
dispatcher.add_handler(GETSTICKER_HANDLER)
dispatcher.add_handler(KANG_HANDLER)
